---
- name: Check Operating System
  fail:
    msg: "Operating System is not Supported!"
  when:
    - ansible_distribution != 'Ubuntu'
    - ansible_distribution_major_version | int >= 14
    - ansible_distribution_minor_version | int == 4

- name: Set Global Facts
  set_fact:
    mongo_distribution: "{{ mongo_distribution | default(default_value, true) }}"
    mongo_admin_password: "{{ mongo_admin_password | default(default_value, true) }}"
    zfs_backend: "{{ zfs_backend if zfs_block_device is defined else 'false' | default(default_value, true) }}"
    zfs_pool_name: "{{ zfs_pool_name | default(default_value, true) }}"
  delegate_to: "{{ item }}"
  with_items:
    - localhost
  run_once: true

- name: Set Host Facts
  set_fact:
    mongo_ip: "{{ mongo_ip | default(defaul_value, true) }}"
    primary: "{{ primary | default(default_value, true) }}"
    arbiter: "{{ arbiter | default(default_value, true) }}"

- name: Set Arbiter Facts
  set_fact:
    arbiter: 'false'
  when:
    - primary

- name: Set System Daemon Facts
  command: bash -c "which systemd || true"
  register: systemd_service

- name: Set ZFS Block Device Facts
  stat:
    path: "/dev/{{ zfs_block_device }}"
  register: zfs_block_stat

- name: Set ZFS Backend Facts
  set_fact:
    zfs_backend: 'false'
  when:
    - ansible_distribution_major_version | int < 16
    - not zfs_block_stat.stat.exists

- name: Upgrade Operating System
  apt:
    force_apt_get: yes
    update_cache: yes
    autoremove: yes
    autoclean: yes
    upgrade: full

- name: Install Required Packages
  apt:
    name: "{{ item }}"
    force_apt_get: yes
    update_cache: yes
    autoremove: yes
    autoclean: yes
    state: present
  with_items:
    - ca-certificates
    - apt-transport-https
    - software-properties-common
    - curl
    - wget

- name: Install Python PIP Packages
  apt:
    name: "{{ item }}"
    force_apt_get: yes
    update_cache: yes
    autoremove: yes
    autoclean: yes
    state: present
  with_items:
    - python-pip

- name: Install PyMongo Packages from Python PIP
  pip:
    name: pymongo
    state: latest
    use_mirrors: no

- name: Install ZFS Packages
  apt:
    name: "{{ item }}"
    force_apt_get: yes
    update_cache: yes
    autoremove: yes
    autoclean: yes
    state: present
  with_items:
    - zfsutils-linux
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Get ZFS Block Device Info
  parted:
    device: "/dev/{{ zfs_block_device }}"
    unit: MiB
  register: zfs_block_info
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Remove ZFS Block Device Partition for MongoDB
  parted:
    device: "/dev/{{ zfs_block_device }}"
    number: "{{ item.num }}"
    state: absent
  with_items:
    - "{{ zfs_block_info.partitions }}"
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Create ZFS Block Device Partition for MongoDB
  parted:
    device: "/dev/{{ zfs_block_device }}"
    number: 1
    part_type: primary
    part_start: 0%
    part_end: 100%
    state: present
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Get ZFS Block Device Partition Info
  parted:
    device: "/dev/{{ zfs_block_device }}1"
    unit: MiB
  register: zfs_partition_info
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Create ZFS Pool for MongoDB
  command: zpool create {{ zfs_pool_name }} -o ashift=12 -O compression=lz4 /dev/{{ zfs_block_device }}1
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Create ZFS Dataset for MongoDB
  command: zfs create -s -o volblocksize=64k -V {{ zfs_partition_info.disk.size }}M {{ zfs_pool_name }}/mongodb
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Format ZFS Dataset for MongoDB
  filesystem:
    fstype: xfs
    dev: /dev/zvol/{{ zfs_pool_name }}/mongodb
  when:
    - group_names == ['mongoc'] or group_names == ['mongod']
    - zfs_backend
    - not arbiter

- name: Install MongoDB Keyring (MongoDB-ORG)
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
    state: present
  when:
    - mongo_distribution == 'mongodb-org'

- name: Install MongoDB Repository (MongoDB-ORG)
  lineinfile:
    dest: /etc/apt/sources.list.d/mongodb-org-3.6.list
    line: "deb [arch=amd64] http://repo.mongodb.org/apt/ubuntu {{ ansible_distribution_release }}/mongodb-org/3.6 multiverse"
    create: yes
    state: present
  when:
    - mongo_distribution == 'mongodb-org'

- name: Install MongoDB Packages (MongoDB-ORG)
  apt:
    name: "{{ item }}"
    force_apt_get: yes
    update_cache: yes
    autoremove: yes
    autoclean: yes
    state: present
  with_items:
    - mongodb-org
  when:
    - mongo_distribution == 'mongodb-org'

# - name: Install MongoDB Repository (Percona)
#   when:
#     - mongo_distribution == 'percona'

- name: Create MongoDB Run Directory
  file:
    path: /var/run/mongodb
    state: directory
    owner: mongodb
    group: mongodb
    recurse: true

- name: Create MongoDB Parent Directory
  file:
    path: /var/lib/mongodb
    state: directory
    owner: mongodb
    group: mongodb
    recurse: true
  when:
    - not zfs_backend

- name: Mount ZFS Dataset to MongoDB Directory
  mount:
    path: /var/lib/mongodb
    src: /dev/zvol/{{ zfs_pool_name }}/mongodb
    fstype: xfs
    opts: defaults
    state: mounted
  when:
    - group_names == 'mongoc'
    - group_names == 'mongod'
    - zfs_backend
    - not arbiter

- name: Create MongoDB Database Directories
  file:
    path: "{{ item }}"
    state: directory
    owner: mongodb
    group: mongodb
    recurse: true
  with_items:
    - /var/lib/mongodb/data
    - /var/lib/mongodb/log
    - /var/lib/mongodb/pki

- name: Distribute MongoDB Keyfile
  copy:
    src: /tmp/keyfile.pem
    dest: /var/lib/mongodb/pki/keyfile.pem
    owner: mongodb
    group: mongodb
    mode: 0400

- name: Reload MongoDB Node Service
  systemd:
    daemon_reload: yes
  when:
    - systemd_service.stdout.find("systemd") != -1

- name: Disable MongoDB Node Service
  service:
    name: mongod
    enabled: no
    state: stopped

- name: Find Exsisting MongoDB Configuration
  find:
    paths: /etc
    patterns: "mongo*"
    use_regex: true
  register: mongodb_config_to_delete

- name: Remove Exsisting MongoDB Configuration
  file:
    path: "{{ item['path'] }}"
    state: absent
  with_items:
    - "{{ mongodb_config_to_delete['files'] }}"

- name: Remove Generated Keyfile
  file:
    path: /tmp/keyfile.pem
    state: absent
  delegate_to: "{{ item }}"
  with_items:
    - localhost
  run_once: true
